//
//  ViewController.swift
//  ScanbotSdkWebKitNativeBridgeExample
//
//  Created by Eddy on 09.10.19.
//  Copyright Â© 2019 doo GmbH. All rights reserved.
//

import UIKit
import WebKit
import ScanbotSDK

class ViewController: UIViewController {
    
    var webView: WKWebView!
    
    override func loadView() {
        let contentController = WKUserContentController();
        // Register JavaScript message handlers!
        contentController.add(self, name: "startDocumentScanner")
        // ...
        
        let webConfiguration = WKWebViewConfiguration()
        webConfiguration.userContentController = contentController
        
        webView = WKWebView(frame: .zero, configuration: webConfiguration)
        view = webView
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()

        if let demoStorageBaseUrl = initScanbotSdkStorage() {
            if let sourceIndexPageUrl = Bundle.main.url(forResource: "index", withExtension: "html", subdirectory: "web") {
                // Workaround for demo purposes: Due to security policy of WKWebView we can only load and show image files
                // generated by Scanbot SDK from the same parent folder where our HTML page (index.html) was loaded.
                // So we copy the html page from the App Bundle to the base storage folder of Scanbot SDK and load it from there.
                let targetIndexPageUrl = demoStorageBaseUrl.appendingPathComponent("index.html")
                if (FileManager.default.secureCopyItem(at: sourceIndexPageUrl, to: targetIndexPageUrl)) {
                    webView.loadFileURL(targetIndexPageUrl, allowingReadAccessTo: targetIndexPageUrl.deletingLastPathComponent())
                } else {
                    showAlert(title: "Error", message: "Could not copy index.html from Bundle to SDK storage!")
                }
            }
        }
    }
    
    func initScanbotSdkStorage() -> URL? {
        // Init a custom storage folder for Scanbot SDK RTU UI page images
        if let baseAppDirUrl = FileManager.default.urls(for: .applicationSupportDirectory, in: .userDomainMask).last {
            let demoStorageUrl = baseAppDirUrl.appendingPathComponent("demo-sdk-storage", isDirectory: true)
            let demoStorageLocation = SBSDKStorageLocation(baseURL: demoStorageUrl)
            
            SBSDKUIPageFileStorage.setDefault(SBSDKUIPageFileStorage(jpegFileFormatAndCompressionQuality: 80, location: demoStorageLocation))
            
            return demoStorageUrl
        }
        return nil
    }
    
    func startDocumentScanner(options: NSDictionary) {
        if (!ScanbotSDK.isLicenseValid()) {
            showAlert(title: "Info", message: "Scanbot SDK trial period / trial license has expired.")
            return
        }
        let configuration = SBSDKUIDocumentScannerConfiguration.default()
        configuration.behaviorConfiguration.isMultiPageEnabled = options["multiPageEnabled"] as? Bool ?? false
        configuration.uiConfiguration.bottomBarBackgroundColor = UIColor.parseFromHexString(hex: options["bottomBarBackgroundColor"] as? String ?? "#c9193d")
        configuration.uiConfiguration.bottomBarButtonsColor = UIColor.parseFromHexString(hex: options["bottomBarButtonsColor"] as? String ?? "#ffffff")
        configuration.textConfiguration.cancelButtonTitle = options["cancelButtonTitle"] as? String ?? "Cancel"
        configuration.textConfiguration.pageCounterButtonTitle = options["pageCounterButtonTitle"] as? String ?? "%d Page(s)"
        // TODO Implement mappings for further configs ...
        
        let scanner = SBSDKUIDocumentScannerViewController.createNew(with: configuration, andDelegate: self)
        scanner.modalPresentationStyle = .fullScreen
        self.present(scanner, animated: true)
    }
    
    func showAlert(title: String, message: String) {
        let alert = UIAlertController(title: title, message: message, preferredStyle: .alert)
        let okAction = UIAlertAction(title: "OK", style: .default)
        alert.addAction(okAction)
        present(alert, animated: true)
    }
}

extension ViewController: WKScriptMessageHandler {
    func userContentController(_ userContentController: WKUserContentController, didReceive message: WKScriptMessage) {
        print(message.name)
        if message.name == "startDocumentScanner", let options = message.body as? NSDictionary {
            print("options: ", options)
            startDocumentScanner(options: options)
        }
    }
}

extension ViewController: SBSDKUIDocumentScannerViewControllerDelegate {
    func scanningViewController(_ viewController: SBSDKUIDocumentScannerViewController, didFinishWith document: SBSDKUIDocument) {
        webView.evaluateJavaScript("documentScannerCallback("+document.jsonString!+")", completionHandler: nil)
    }
}
